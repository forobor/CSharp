#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace кинопрокат
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Kinoprokat")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertФильмы(Фильмы instance);
    partial void UpdateФильмы(Фильмы instance);
    partial void DeleteФильмы(Фильмы instance);
    partial void InsertКлиенты(Клиенты instance);
    partial void UpdateКлиенты(Клиенты instance);
    partial void DeleteКлиенты(Клиенты instance);
    partial void InsertВыданоВПрокат(ВыданоВПрокат instance);
    partial void UpdateВыданоВПрокат(ВыданоВПрокат instance);
    partial void DeleteВыданоВПрокат(ВыданоВПрокат instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::кинопрокат.Properties.Settings.Default.KinoprokatConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Фильмы> Фильмы
		{
			get
			{
				return this.GetTable<Фильмы>();
			}
		}
		
		public System.Data.Linq.Table<Клиенты> Клиенты
		{
			get
			{
				return this.GetTable<Клиенты>();
			}
		}
		
		public System.Data.Linq.Table<ВыданоВПрокат> ВыданоВПрокат
		{
			get
			{
				return this.GetTable<ВыданоВПрокат>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Фильмы")]
	public partial class Фильмы : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Фильма;
		
		private string _Название;
		
		private string _Режиссер;
		
		private string _Рейтинг;
		
		private System.Nullable<bool> _Наличие;
		
		private EntitySet<ВыданоВПрокат> _ВыданоВПрокат;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ФильмаChanging(int value);
    partial void OnID_ФильмаChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnРежиссерChanging(string value);
    partial void OnРежиссерChanged();
    partial void OnРейтингChanging(string value);
    partial void OnРейтингChanged();
    partial void OnНаличиеChanging(System.Nullable<bool> value);
    partial void OnНаличиеChanged();
    #endregion
		
		public Фильмы()
		{
			this._ВыданоВПрокат = new EntitySet<ВыданоВПрокат>(new Action<ВыданоВПрокат>(this.attach_ВыданоВПрокат), new Action<ВыданоВПрокат>(this.detach_ВыданоВПрокат));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Фильма", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Фильма
		{
			get
			{
				return this._ID_Фильма;
			}
			set
			{
				if ((this._ID_Фильма != value))
				{
					this.OnID_ФильмаChanging(value);
					this.SendPropertyChanging();
					this._ID_Фильма = value;
					this.SendPropertyChanged("ID_Фильма");
					this.OnID_ФильмаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Режиссер", DbType="NChar(30)")]
		public string Режиссер
		{
			get
			{
				return this._Режиссер;
			}
			set
			{
				if ((this._Режиссер != value))
				{
					this.OnРежиссерChanging(value);
					this.SendPropertyChanging();
					this._Режиссер = value;
					this.SendPropertyChanged("Режиссер");
					this.OnРежиссерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Рейтинг", DbType="NChar(30)")]
		public string Рейтинг
		{
			get
			{
				return this._Рейтинг;
			}
			set
			{
				if ((this._Рейтинг != value))
				{
					this.OnРейтингChanging(value);
					this.SendPropertyChanging();
					this._Рейтинг = value;
					this.SendPropertyChanged("Рейтинг");
					this.OnРейтингChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наличие", DbType="Bit")]
		public System.Nullable<bool> Наличие
		{
			get
			{
				return this._Наличие;
			}
			set
			{
				if ((this._Наличие != value))
				{
					this.OnНаличиеChanging(value);
					this.SendPropertyChanging();
					this._Наличие = value;
					this.SendPropertyChanged("Наличие");
					this.OnНаличиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Фильмы_ВыданоВПрокат", Storage="_ВыданоВПрокат", ThisKey="ID_Фильма", OtherKey="ID_Фильма")]
		public EntitySet<ВыданоВПрокат> ВыданоВПрокат
		{
			get
			{
				return this._ВыданоВПрокат;
			}
			set
			{
				this._ВыданоВПрокат.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ВыданоВПрокат(ВыданоВПрокат entity)
		{
			this.SendPropertyChanging();
			entity.Фильмы = this;
		}
		
		private void detach_ВыданоВПрокат(ВыданоВПрокат entity)
		{
			this.SendPropertyChanging();
			entity.Фильмы = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Клиенты")]
	public partial class Клиенты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Клиента;
		
		private string _Имя;
		
		private string _Фамилия;
		
		private string _Телефон;
		
		private EntitySet<ВыданоВПрокат> _ВыданоВПрокат;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_КлиентаChanging(int value);
    partial void OnID_КлиентаChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    #endregion
		
		public Клиенты()
		{
			this._ВыданоВПрокат = new EntitySet<ВыданоВПрокат>(new Action<ВыданоВПрокат>(this.attach_ВыданоВПрокат), new Action<ВыданоВПрокат>(this.detach_ВыданоВПрокат));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Клиента", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Клиента
		{
			get
			{
				return this._ID_Клиента;
			}
			set
			{
				if ((this._ID_Клиента != value))
				{
					this.OnID_КлиентаChanging(value);
					this.SendPropertyChanging();
					this._ID_Клиента = value;
					this.SendPropertyChanged("ID_Клиента");
					this.OnID_КлиентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NChar(30)")]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NChar(30)")]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="NChar(30)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_ВыданоВПрокат", Storage="_ВыданоВПрокат", ThisKey="ID_Клиента", OtherKey="ID_Клиента")]
		public EntitySet<ВыданоВПрокат> ВыданоВПрокат
		{
			get
			{
				return this._ВыданоВПрокат;
			}
			set
			{
				this._ВыданоВПрокат.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ВыданоВПрокат(ВыданоВПрокат entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = this;
		}
		
		private void detach_ВыданоВПрокат(ВыданоВПрокат entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ВыданоВПрокат")]
	public partial class ВыданоВПрокат : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код_Выдачи;
		
		private System.Nullable<int> _ID_Фильма;
		
		private System.Nullable<int> _ID_Клиента;
		
		private System.Nullable<decimal> _Цена;
		
		private EntityRef<Клиенты> _Клиенты;
		
		private EntityRef<Фильмы> _Фильмы;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКод_ВыдачиChanging(int value);
    partial void OnКод_ВыдачиChanged();
    partial void OnID_ФильмаChanging(System.Nullable<int> value);
    partial void OnID_ФильмаChanged();
    partial void OnID_КлиентаChanging(System.Nullable<int> value);
    partial void OnID_КлиентаChanged();
    partial void OnЦенаChanging(System.Nullable<decimal> value);
    partial void OnЦенаChanged();
    #endregion
		
		public ВыданоВПрокат()
		{
			this._Клиенты = default(EntityRef<Клиенты>);
			this._Фильмы = default(EntityRef<Фильмы>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код_Выдачи", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Код_Выдачи
		{
			get
			{
				return this._Код_Выдачи;
			}
			set
			{
				if ((this._Код_Выдачи != value))
				{
					this.OnКод_ВыдачиChanging(value);
					this.SendPropertyChanging();
					this._Код_Выдачи = value;
					this.SendPropertyChanged("Код_Выдачи");
					this.OnКод_ВыдачиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Фильма", DbType="Int")]
		public System.Nullable<int> ID_Фильма
		{
			get
			{
				return this._ID_Фильма;
			}
			set
			{
				if ((this._ID_Фильма != value))
				{
					if (this._Фильмы.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ФильмаChanging(value);
					this.SendPropertyChanging();
					this._ID_Фильма = value;
					this.SendPropertyChanged("ID_Фильма");
					this.OnID_ФильмаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Клиента", DbType="Int")]
		public System.Nullable<int> ID_Клиента
		{
			get
			{
				return this._ID_Клиента;
			}
			set
			{
				if ((this._ID_Клиента != value))
				{
					if (this._Клиенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_КлиентаChanging(value);
					this.SendPropertyChanging();
					this._ID_Клиента = value;
					this.SendPropertyChanged("ID_Клиента");
					this.OnID_КлиентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена", DbType="Money")]
		public System.Nullable<decimal> Цена
		{
			get
			{
				return this._Цена;
			}
			set
			{
				if ((this._Цена != value))
				{
					this.OnЦенаChanging(value);
					this.SendPropertyChanging();
					this._Цена = value;
					this.SendPropertyChanged("Цена");
					this.OnЦенаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_ВыданоВПрокат", Storage="_Клиенты", ThisKey="ID_Клиента", OtherKey="ID_Клиента", IsForeignKey=true)]
		public Клиенты Клиенты
		{
			get
			{
				return this._Клиенты.Entity;
			}
			set
			{
				Клиенты previousValue = this._Клиенты.Entity;
				if (((previousValue != value) 
							|| (this._Клиенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Клиенты.Entity = null;
						previousValue.ВыданоВПрокат.Remove(this);
					}
					this._Клиенты.Entity = value;
					if ((value != null))
					{
						value.ВыданоВПрокат.Add(this);
						this._ID_Клиента = value.ID_Клиента;
					}
					else
					{
						this._ID_Клиента = default(Nullable<int>);
					}
					this.SendPropertyChanged("Клиенты");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Фильмы_ВыданоВПрокат", Storage="_Фильмы", ThisKey="ID_Фильма", OtherKey="ID_Фильма", IsForeignKey=true)]
		public Фильмы Фильмы
		{
			get
			{
				return this._Фильмы.Entity;
			}
			set
			{
				Фильмы previousValue = this._Фильмы.Entity;
				if (((previousValue != value) 
							|| (this._Фильмы.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Фильмы.Entity = null;
						previousValue.ВыданоВПрокат.Remove(this);
					}
					this._Фильмы.Entity = value;
					if ((value != null))
					{
						value.ВыданоВПрокат.Add(this);
						this._ID_Фильма = value.ID_Фильма;
					}
					else
					{
						this._ID_Фильма = default(Nullable<int>);
					}
					this.SendPropertyChanged("Фильмы");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
